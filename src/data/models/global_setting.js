import { Schema, model } from "mongoose";

const globalSettingSchema = new Schema({
	id: {
		unique: true,
		type: Number,
	},
	siteName: String,
	version: String,
	siteUrl: String,
	playStore: String,
	appVersion: String,
	forceUpdate: Boolean,
	appStore: String,
	maintenance: Boolean,
	appMaintenance: Boolean,
	adminUrl: String,
	localUrl: Boolean,
	socialMediaLinks: {
		facebook: String,
		instagram: String,
		twitter: String,
		linkedin: String,
		pinterest: String,
		youtube: String,
		skype: String,
		whatsapp: String,
		viber: String,
	},
	startingYear: String,
	timezone: String,
	defaultUploadDriver: String,
	supportNumber: String,
	supportEmail: String,
	defaultCurrency: String,
	defaultLanguage: String,
	currencyFormat: String,
	dateFormat: String,
	minPrice: String,
	maxPrice: String,
	maxguests: Number,
	logo: {
		src: String,
		uploadDir: {
			type: String,
			default: "logos/",
		},
		uploadDriver: String,
	},
	secondaryLogo: {
		src: String,
		uploadDir: {
			type: String,
			default: "logos/",
		},
		uploadDriver: String,
	},
	favicon: {
		src: String,
		uploadDir: {
			type: String,
			default: "logos/",
		},
		uploadDriver: String,
	},
	footerImage: {
		src: String,
		uploadDir: {
			type: String,
			default: "logos/",
		},
		uploadDriver: String,
	},
	headCode: String,
	footCode: String,
	smsProvider: String,
	mapProvider: String,
	autocompleteProvider: String,
	userInactiveDays: Number,
	defaultUserStatus: String,
	defaultListingStatus: String,
	defaultExperienceStatus: String,
	backupPeriod: String,
	autoPayout: Boolean,
	otpEnabled: Boolean,
	disputeDefaultApproval: Boolean,
	copyrightLink: String,
	copyrightText: String,
	maxReviewDays: Number,
	experienceEnabled: Boolean,
	hostCoupon: Boolean,
	payoutHoldDays: Number,
	maxGuestDisputeDays: Number,
	maxHostDisputeDays: Number,
	lastCronJob: Date,
	fee: {
		serviceFeeType: {
			type: String,
			enum: ["fixed", "percentage"],
		},
		serviceFee: Number,
		minServiceFee: Number,
		hostFee: Number,
		hostPenaltyEnabled: Boolean,
		hostCancelLimit: Number,
		penaltyDays: Number,
		cancelBeforeDays: Number,
		cancelAfterDays: Number,
	},
	referralSetting: {
		isEnabled: Boolean,
		perUserLimit: Number,
		newReferralCredit: Number,
		userBecomeGuestCredit: Number,
		userBecomeHostCredit: Number,
	},
	additionalTaxes: [
		{
			id: {
				type: Number,
				unique: true,
			},
			name: { type: Map, of: String },
			type: {
				type: String,
				enum: ["admin", "host"],
			},
			calculationType: {
				type: String,
				enum: ["fixed", "percentage"],
			},
			currencyCode: String,
			value: Number,
		},
	],
});

const GlobalSetting = model("GlobalSetting", globalSettingSchema, "global_settings");

export default GlobalSetting;
